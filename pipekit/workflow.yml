apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ci-workflow-
  namespace: argo
spec:
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: nfs
      resources:
        requests:
          storage: 1Gi
  volumes:
  - name: build
    emptyDir: {}
  arguments:
    parameters:
      - name: gh_org
        value: "kenahrens"
      - name: gh_repo
        value: "spaceboot"
      - name: git_branch
        value: 'main'
      - name: push_image
        value: 'true'
      - name: docker_image
        value: "gcr.io/speedscale-demos/spaceboot"
      - name: docker_tag
        value: "pipekit-latest"
  entrypoint: main
  templates:
  - name: main
    dag:
      tasks:
        - name: git-checkout
          template: git-checkout
        - name: mount-docker-secret
          template: mount-docker-secret
          when: "{{workflow.parameters.push_image}} == true"
        - name: build-container
          template: build-container
          depends: (git-checkout && mount-docker-secret)

  - name: git-checkout
    container:
      image: alpine
      command:
        - sh
        - -c
        - |
          apk --update add git

          cd /workdir
          echo "Start Clone of source branch"
          git clone https://github.com/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}.git
          cd {{workflow.parameters.gh_repo}}

          # Suppresses a git error. We aren't pushing back to git so this is fine.
          git config --global --add safe.directory /workdir/{{workflow.parameters.gh_repo}}
          git config --global user.email "sales@pipekit.io"
          git config --global user.name "Tim Collins"

          if [ -z "$GIT_COMMIT" ]
          then
            echo "No branch specified via Pipekit, fall back to workflow param"
            git checkout {{workflow.parameters.git_branch}}
          else
            echo "Checking out commit $GIT_COMMIT"
            git checkout $GIT_COMMIT
          fi

          echo "Complete."
      volumeMounts:
      - name: "workdir"
        mountPath: /workdir
      resources:
        requests:
          memory: 250Mi
          cpu: 4m
    #20 minutes
    activeDeadlineSeconds: 1200

  - name: mount-docker-secret
    container:
      image: alpine
      command:
        - sh
        - -c
        - |
          AUTH=$(echo -n "_json_key:${tim_secret}" | base64);
          echo """{
              \"auths\": {
                  \"gcr.io\": {
                      \"auth\": \"${AUTH}\"
                  }
              }
          }""" >> /buildkit/.docker/config.json


          cat /buildkit/.docker/config.json
      volumeMounts:
      - name: "workdir"
        mountPath: /buildkit/.docker
      resources:
        requests:
          memory: 32Mi
          cpu: 10m
    #20 minutes
    activeDeadlineSeconds: 1200

  - name: build-container
    container:
      image: moby/buildkit:master-rootless
      command:
        - sh
        - -c
        - |
          echo "Retrieving git clone..." && cp -R /workdir /tmp || exit 1
          buildctl-daemonless.sh build \
          --frontend \
          dockerfile.v0 \
          --local \
          context=/tmp/workdir/{{workflow.parameters.gh_repo}} \
          --local \
          dockerfile=/tmp/workdir/{{workflow.parameters.gh_repo}} \
          --opt filename=Dockerfile \
          --opt platform=linux/amd64 \
          --export-cache \
          type=registry,ref={{workflow.parameters.docker_image}}:pipekit-buildcache,mode=max,ignore-error=true \
          --export-cache type=inline \
          --import-cache \
          type=registry,ref={{workflow.parameters.docker_image}}:pipekit-buildcache \
          --import-cache \
          type=registry,ref={{workflow.parameters.docker_image}}:{{workflow.parameters.docker_tag}} \
          --output \
          type=image,name={{workflow.parameters.docker_image}}:{{workflow.parameters.docker_tag}},push={{workflow.parameters.push_image}}
      env:
        - name: DOCKER_CONFIG
          value: /buildkit/.docker
        - name: BUILDKITD_FLAGS
          value: --oci-worker-no-process-sandbox
      volumeMounts:
      - name: "workdir"
        mountPath: /buildkit/.docker/
      - name: "workdir"
        mountPath: /workdir
      - name: build
        mountPath: /tmp
      resources:
        requests:
          memory: 3Gi
          cpu: 4
          ephemeral-storage: 2Gi
    #20 minutes
    activeDeadlineSeconds: 1200
